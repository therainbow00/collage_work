ASCII to Integer (scanf):
digits ⟵ "0123456789ABCDEF"
base ⟵ The base of the number system (i.e. 10, 2, 16, etc)

str ⟵ some string of characters representing a integer value
value ⟵ 0
i ⟵ 0
while ( str[i] ≠ end of string ):
    value ⟵ value ∙ base
    str[ i ] ⟵ uppercase version of str[i] // (optional)
    value ⟵ value + (index of str[i] in digits)
    i ⟵ i + 1




Integer to ASCII (printf):

digits ⟵ "0123456789ABCDEF"

str ⟵ array of characters large enough to store the number after conversion
i ⟵ index at end of str
str[i] ⟵ '\0'

if (value < 0) {
  neg = true;
  value = -value;
}

repeat:
    d ⟵ value % base
    i ⟵ i - 1
    str[ i ] ⟵ digits[ d ]
    value ⟵ value / base
until ( value = 0 )

if (neg) {
  add the - sign
}

d =     3 % 10 -> 3
value = 3 / 10 -> 0

str = [...._, '3', '0', '5', '\0']


1. move memory around (copying data)
   assignment: x = 5
2. Basic math: addition, subtraction, multiplication, division, binary ops
   expressions: x + x
3. Compare things:
   a < b
4. control the flow of execution:
   if-else, loops, functions

rax, rbx

50 23 5		mov rax, 5		; rax = 5
201 15 6	add rax, rbx		; rax = rax + rbx
110 10		cmp rax, 10		; what is rax  w/r/t 10?  <,>,=?
50 39 40	jl  dosomething		; if rax<10 goto dosomething
